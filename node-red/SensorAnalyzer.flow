[
    {
        "id": "a4031254.d54bd",
        "type": "tab",
        "label": "SensorAnalyzer"
    },
    {
        "id": "f5e26680.dc8c1",
        "type": "mqtt in",
        "z": "a4031254.d54bd",
        "name": "Sensor values",
        "topic": "aq-raw",
        "qos": "0",
        "broker": "c1cf7c8d.ce2c38",
        "x": 96.5,
        "y": 349,
        "wires": [
            [
                "d0a90eda.88c46"
            ]
        ]
    },
    {
        "id": "7c0bd638.f47248",
        "type": "function",
        "z": "a4031254.d54bd",
        "name": "MQ135 Analzyer",
        "func": "if (msg.payload === undefined) {\n    return null;\n}\nvar count = msg.counter;\nvar mqVal = parseInt(msg.payload);\nvar mqStatus = 0;\n\n//Analyzing values\n//mqStatus = (5 * mqVal) / 1024;\nvar intervals = [50, 150, 350, 600, 1023];\nvar analysisFn = flow.get(\"analysis-fn\");\nif (analysisFn === undefined) {\n    return null;\n}\n\nmqStatus = analysisFn(mqVal, intervals);\n\nmsg.payload = {};\nmsg.payload.raw = mqVal;\nmsg.payload.type = 'mq';\nmsg.payload.processed = mqStatus;\nmsg.counter = count;\n\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 746,
        "y": 424,
        "wires": [
            [
                "c4e70eb7.50634",
                "d83bc164.ed444"
            ]
        ]
    },
    {
        "id": "16aa8a81.805e45",
        "type": "function",
        "z": "a4031254.d54bd",
        "name": "Temp & RH Analyzer",
        "func": "if (msg.payload === undefined) {\n    return null;\n}\nvar count = msg.counter;\nvar rh = parseFloat(msg.payload.rh) / 100;\nvar temp = parseFloat(msg.payload.temp);\n\nvar dewPoint = Math.pow(rh, 1 / 8) * (112 + 0.9 * temp) + 0.1 * temp - 112;\nvar expIndex = 5417.753 * ((1 / 273.16) - (1 / (dewPoint + 273.16)));\nvar humidex = temp + 0.5555 * (6.11 * Math.exp(expIndex) - 10);\n\n//Convert to 1-5 scala\nvar integer = parseInt(humidex / 10) - 1;\nif (integer < 0) {\n    integer = 0;\n}\nvar decimal = humidex % 10;\nvar convertedValue = integer + (decimal / 10);\n\nmsg.payload.raw = humidex;\nmsg.payload.type = 'trh';\nmsg.payload.processed = convertedValue;\nmsg.counter = count;\n\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 765,
        "y": 378,
        "wires": [
            [
                "d83bc164.ed444"
            ]
        ]
    },
    {
        "id": "486f2e44.64761",
        "type": "function",
        "z": "a4031254.d54bd",
        "name": "Raw Values Split",
        "func": "context.set('currentCounter', msg.payload.counter);\n\nvar rh = msg.payload.humidity;\nvar temp = msg.payload.temperature;\nvar rht = {rh: rh, temp: temp};\nvar mq = msg.payload.mq135;\nvar co2 = msg.payload.co2;\nvar tvoc = msg.payload.tvoc;\n\nvar rhtPayload = (rht.temp !== undefined)? {payload: rht, counter: msg.payload.counter}:null;\nvar mqPayload = (mq !== undefined)? {payload: mq, counter: msg.payload.counter}:null;\nvar co2Payload = (co2 !== undefined)? {payload: co2, counter: msg.payload.counter}:null;\nvar tvocPayload = (tvoc !== undefined)? {payload: tvoc, counter: msg.payload.counter}:null;\n\nreturn [rhtPayload, mqPayload, co2Payload, tvocPayload];",
        "outputs": "4",
        "noerr": 0,
        "x": 521.5,
        "y": 443,
        "wires": [
            [
                "16aa8a81.805e45"
            ],
            [
                "7c0bd638.f47248"
            ],
            [
                "b2677329.46274"
            ],
            [
                "499c80cf.59b5f"
            ]
        ]
    },
    {
        "id": "ffc8b9b6.541648",
        "type": "debug",
        "z": "a4031254.d54bd",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 520.5,
        "y": 347,
        "wires": []
    },
    {
        "id": "d0a90eda.88c46",
        "type": "json",
        "z": "a4031254.d54bd",
        "name": "",
        "x": 290.5,
        "y": 348,
        "wires": [
            [
                "486f2e44.64761",
                "ffc8b9b6.541648"
            ]
        ]
    },
    {
        "id": "c4e70eb7.50634",
        "type": "debug",
        "z": "a4031254.d54bd",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1014.5,
        "y": 385,
        "wires": []
    },
    {
        "id": "5ec09ada.d696c4",
        "type": "debug",
        "z": "a4031254.d54bd",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1415,
        "y": 520.0000305175781,
        "wires": []
    },
    {
        "id": "d83bc164.ed444",
        "type": "function",
        "z": "a4031254.d54bd",
        "name": "Value Join",
        "func": "function getPreviousValue(name) {\n    var element = context.get(name);\n    if (element === undefined) {\n        element = {raw:0,processed:0};\n    }\n    //Check current counter\n    //If no new values after 50 measurements (5 seconds), reset\n    var currentCounter = flow.get('currentCounter');\n    if ('counter' in element && (element.counter - currentCounter) > 50) {\n        element = {raw:0,processed:0};\n    }\n    return element;\n}\n\nvar trh = getPreviousValue('trh');\nvar mq = getPreviousValue('mq');\nvar co2 = getPreviousValue('co2');\nvar tvoc = getPreviousValue('tvoc');\n\nif (msg.payload.type == 'trh') {\n    trh = msg.payload;\n    delete trh.type;\n    context.set('trh', trh);\n} else if (msg.payload.type == 'mq') {\n    mq = msg.payload;\n    delete mq.type;\n    context.set('mq', mq);\n} else if (msg.payload.type == 'co2') {\n    co2 = msg.payload;\n    delete co2.type;\n    context.set('co2', co2);\n} else if (msg.payload.type == 'tvoc') {\n    tvoc = msg.payload;\n    delete tvoc.type;\n    context.set('tvoc', tvoc);\n}\n\nmsg = {};\nmsg.payload = {};\nmsg.payload.trh = trh;\nmsg.payload.mq = mq;\nmsg.payload.co2 = co2;\nmsg.payload.tvoc = tvoc;\nmsg.payload.max = Math.max(trh.processed, mq.processed, co2.processed, tvoc.processed);\nif (msg.payload.max == trh.processed) {\n    msg.payload.type = \"trh\";\n} else if (msg.payload.max == mq.processed) {\n    msg.payload.type = \"mq\";\n} else if (msg.payload.max == co2.processed) {\n    msg.payload.type = \"co2\";\n} else {\n    msg.payload.type = \"tvoc\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1031.5,
        "y": 446,
        "wires": [
            [
                "f5dfedf8.311818"
            ]
        ]
    },
    {
        "id": "fc05e188.af63e",
        "type": "mqtt out",
        "z": "a4031254.d54bd",
        "name": "",
        "topic": "aq-processed",
        "qos": "0",
        "retain": "false",
        "broker": "c1cf7c8d.ce2c38",
        "x": 1436.5,
        "y": 443,
        "wires": []
    },
    {
        "id": "b2677329.46274",
        "type": "function",
        "z": "a4031254.d54bd",
        "name": "CO2 Analzyer",
        "func": "if (msg.payload === undefined) {\n    return null;\n}\nvar count = msg.counter;\nvar co2Val = parseInt(msg.payload);\nvar co2Status = 0;\n\n//Analyzing values\n//Value range 450 - 2000 ppm\nvar intervals = [450, 550, 800, 1500, 2000];\nvar analysisFn = flow.get(\"analysis-fn\");\nif (analysisFn === undefined) {\n    return null;\n}\n\nco2Status = analysisFn(co2Val, intervals);\n\nmsg.payload = {};\nmsg.payload.raw = co2Val;\nmsg.payload.type = \"co2\";\nmsg.payload.processed = co2Status;\nmsg.counter = count;\n\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 747,
        "y": 472,
        "wires": [
            [
                "d83bc164.ed444",
                "18e9b99c.98b016"
            ]
        ]
    },
    {
        "id": "499c80cf.59b5f",
        "type": "function",
        "z": "a4031254.d54bd",
        "name": "TVOC Analzyer",
        "func": "if (msg.payload === undefined) {\n    return null;\n}\nvar count = msg.counter;\nvar vocVal = msg.payload;\nvar vocStatus = 0;\n\n//Analyzing values\n//Value range 125 - 600 ppb\nvar intervals = [125, 200, 300, 400, 600];\nvar analysisFn = flow.get(\"analysis-fn\");\nif (analysisFn === undefined) {\n    return null;\n}\n\nvocStatus = analysisFn(vocVal, intervals);\n\nmsg.payload = {};\nmsg.payload.raw = vocVal;\nmsg.payload.type = \"tvoc\";\nmsg.payload.processed = vocStatus;\nmsg.counter = count;\n\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 747,
        "y": 519,
        "wires": [
            [
                "d83bc164.ed444",
                "1febff42.b20141"
            ]
        ]
    },
    {
        "id": "18e9b99c.98b016",
        "type": "debug",
        "z": "a4031254.d54bd",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 990,
        "y": 506,
        "wires": []
    },
    {
        "id": "1febff42.b20141",
        "type": "debug",
        "z": "a4031254.d54bd",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 983,
        "y": 562,
        "wires": []
    },
    {
        "id": "f5dfedf8.311818",
        "type": "delay",
        "z": "a4031254.d54bd",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 1204,
        "y": 443,
        "wires": [
            [
                "fc05e188.af63e",
                "5ec09ada.d696c4"
            ]
        ]
    },
    {
        "id": "d6e0452e.57c0c8",
        "type": "function",
        "z": "a4031254.d54bd",
        "name": "Global Deployment",
        "func": "var fn = function analyzeValue(value, intervals) {\n\tvar status = 0;\n\tvar previousInterval = 0;\n\tfor (var i in intervals) {\n\t\tif (value <= intervals[i]) {\n\t\t\tvar span = (intervals[i] - previousInterval);\n\t\t\tstatus = parseInt(i) + parseFloat((value - previousInterval) / span);\n\t\t\treturn status;\n\t\t}\n\t\tpreviousInterval = intervals[i];\n\t}\n\tstatus = 5;\n\treturn status;\n};\n\nflow.set(\"analysis-fn\",fn);",
        "outputs": 1,
        "noerr": 0,
        "x": 326.5,
        "y": 171,
        "wires": [
            []
        ]
    },
    {
        "id": "c8176c77.d51b8",
        "type": "inject",
        "z": "a4031254.d54bd",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 104.5,
        "y": 171,
        "wires": [
            [
                "d6e0452e.57c0c8"
            ]
        ]
    },
    {
        "id": "4d357ffb.e424c",
        "type": "function",
        "z": "a4031254.d54bd",
        "name": "Invalidate outdated values",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 951.7188720703125,
        "y": 231.16668701171875,
        "wires": [
            []
        ]
    },
    {
        "id": "c1cf7c8d.ce2c38",
        "type": "mqtt-broker",
        "z": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": ""
    }
]