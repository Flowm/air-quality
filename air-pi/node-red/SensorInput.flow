[
    {
        "id": "701a779f.211a18",
        "type": "tab",
        "label": "SensorInput"
    },
    {
        "id": "6df25c63.240e34",
        "type": "serial in",
        "z": "701a779f.211a18",
        "name": "Sensors",
        "serial": "b4141b9a.c8349",
        "x": 121,
        "y": 348,
        "wires": [
            [
                "1b0ea87d.7d3558",
                "57d13f70.59233"
            ]
        ]
    },
    {
        "id": "4eb94ecb.d5ae",
        "type": "sqlite",
        "z": "701a779f.211a18",
        "mydb": "80bcdc23.753798",
        "name": "SensorDB",
        "x": 1314.999984741211,
        "y": 270,
        "wires": [
            [
                "87f84797.96f308"
            ]
        ]
    },
    {
        "id": "d132b57b.219b3",
        "type": "inject",
        "z": "701a779f.211a18",
        "name": "Create table",
        "topic": "create table sensors(id INTEGER PRIMARY KEY NOT NULL, temperature REAL, humidity REAL, pressure REAL, mq135 INTEGER, timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL);",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 1068.499984741211,
        "y": 229,
        "wires": [
            [
                "4eb94ecb.d5ae"
            ]
        ]
    },
    {
        "id": "9dc65c9a.3d0398",
        "type": "inject",
        "z": "701a779f.211a18",
        "name": "Delete table",
        "topic": "DROP TABLE sensors",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 1062.499984741211,
        "y": 177,
        "wires": [
            [
                "4eb94ecb.d5ae"
            ]
        ]
    },
    {
        "id": "87f84797.96f308",
        "type": "debug",
        "z": "701a779f.211a18",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1507.999984741211,
        "y": 270,
        "wires": []
    },
    {
        "id": "405ea7b3.8860d",
        "type": "function",
        "z": "701a779f.211a18",
        "name": "INSERT BIND",
        "func": "var data = msg.payload;\n\nmsg.topic = \"INSERT INTO sensors (temperature, humidity, pressure, mq135) VALUES (?,?,?,?)\";\nmsg.payload = [data.temperature, data.humidity, data.pressure, data.mq135];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1092.499984741211,
        "y": 319,
        "wires": [
            [
                "a39fcf7.cfba4b",
                "4eb94ecb.d5ae"
            ]
        ]
    },
    {
        "id": "6db6059f.c4e974",
        "type": "function",
        "z": "701a779f.211a18",
        "name": "Sensors to JSON",
        "func": "var sensors = msg.payload.split(\",\");\n\nvar json = {};\nfor (i=0; i<sensors.length; i++) {\n\tvar fields = sensors[i].split(\"=\");\n\tif (fields[1] !== \"\") {\n\t    json[fields[0]] = fields[1];   \n\t}\n}\n\nmsg.payload = json;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520.4999542236328,
        "y": 349,
        "wires": [
            [
                "4fd6db01.19ced4"
            ]
        ]
    },
    {
        "id": "6fded24.2b96c2c",
        "type": "debug",
        "z": "701a779f.211a18",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1090.499984741211,
        "y": 458,
        "wires": []
    },
    {
        "id": "c8be6f26.4b2258",
        "type": "sqlite",
        "z": "701a779f.211a18",
        "mydb": "80bcdc23.753798",
        "name": "SensorDB",
        "x": 511,
        "y": 541,
        "wires": [
            [
                "529b7a9.428f484"
            ]
        ]
    },
    {
        "id": "a0e52cae.f0b2c8",
        "type": "inject",
        "z": "701a779f.211a18",
        "name": "SELECT *",
        "topic": "SELECT * FROM SENSORS",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 318,
        "y": 541,
        "wires": [
            [
                "c8be6f26.4b2258"
            ]
        ]
    },
    {
        "id": "529b7a9.428f484",
        "type": "debug",
        "z": "701a779f.211a18",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 703,
        "y": 541,
        "wires": []
    },
    {
        "id": "a39fcf7.cfba4b",
        "type": "debug",
        "z": "701a779f.211a18",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1318.999984741211,
        "y": 340,
        "wires": []
    },
    {
        "id": "1b0ea87d.7d3558",
        "type": "debug",
        "z": "701a779f.211a18",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 320.99998474121094,
        "y": 295,
        "wires": []
    },
    {
        "id": "8a4b8f7c.44ba08",
        "type": "delay",
        "z": "701a779f.211a18",
        "name": "Limit messages",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 875.4999847412109,
        "y": 350,
        "wires": [
            [
                "6fded24.2b96c2c",
                "405ea7b3.8860d",
                "2cf0e710.2251c"
            ]
        ]
    },
    {
        "id": "2fed0d33.cf037a",
        "type": "sqlite",
        "z": "701a779f.211a18",
        "mydb": "80bcdc23.753798",
        "name": "SensorDB",
        "x": 510,
        "y": 598,
        "wires": [
            [
                "d369ac35.f98f7"
            ]
        ]
    },
    {
        "id": "678e3d7e.abf3dc",
        "type": "inject",
        "z": "701a779f.211a18",
        "name": "SELECT LAST",
        "topic": "SELECT * FROM sensors ORDER BY id DESC LIMIT 1;",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 323,
        "y": 598,
        "wires": [
            [
                "2fed0d33.cf037a"
            ]
        ]
    },
    {
        "id": "d369ac35.f98f7",
        "type": "debug",
        "z": "701a779f.211a18",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 702,
        "y": 599,
        "wires": []
    },
    {
        "id": "2cf0e710.2251c",
        "type": "mqtt out",
        "z": "701a779f.211a18",
        "name": "Publish sensor data",
        "topic": "aq-raw",
        "qos": "0",
        "retain": "false",
        "broker": "c1cf7c8d.ce2c38",
        "x": 1152.499984741211,
        "y": 394,
        "wires": []
    },
    {
        "id": "4fd6db01.19ced4",
        "type": "function",
        "z": "701a779f.211a18",
        "name": "Filter",
        "func": "var json = msg.payload;\n\n//Hardcoded invalid values, meaning the sensors are currently disabled\nif (\"temperature\" in json && \"pressure\" in json && \"humidity\" in json) {\n    //First case: bme280 not connected\n    //Seconds case: bme280 init failed\n    if ((parseInt(json.temperature) == 187.29 && parseInt(json.pressure) == -104.50 && parseInt(json.humidity) == 100.00) || (parseInt(json.temperature) == 23.78 && parseInt(json.pressure) == 754.50 && parseInt(json.humidity) == 65.886)) {\n        delete json.temperature;\n        delete json.pressure;\n        delete json.humidity;\n    }\n}\n\nif (\"mq135\" in json && parseInt(json.mq135) == 1023) {\n    delete json.mq135;\n}\n\nif (\"iaqs\" in json && parseInt(json.iaqs) !== 0) {\n    delete json.iaqs;\n    delete json.co2;\n    delete json.tvoc;\n}\n\nmsg.payload = json;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 695.4999847412109,
        "y": 350,
        "wires": [
            [
                "8a4b8f7c.44ba08"
            ]
        ]
    },
    {
        "id": "57d13f70.59233",
        "type": "function",
        "z": "701a779f.211a18",
        "name": "Checksum",
        "func": "function checksum(str, chk) {\n    sum = 0;\n    for (var i = 0; i < str.length; i++) {\n        var chr = str.charCodeAt(i);\n        sum += (chr * i);\n    }\n    sum = 0xFF & sum;\n    return chk == sum;\n}\n\nvar cleanString = msg.payload.replace(/\\n|\\r/g,\"\");\nvar tmp = cleanString.split(\",chk=\");\nvar check = (tmp.length == 2) ? tmp[1] : null;\nif (check === null) {\n    return null;\n}\n\nvar cleanPayload = tmp[0];\n//Performing checksum\nif (!checksum(cleanPayload, parseInt(check))) {\n    return null;\n}\n\nmsg.payload = cleanPayload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 311.4964904785156,
        "y": 348.1632080078125,
        "wires": [
            [
                "6db6059f.c4e974",
                "5e0c8122.05af6"
            ]
        ]
    },
    {
        "id": "5e0c8122.05af6",
        "type": "debug",
        "z": "701a779f.211a18",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 528.8957977294922,
        "y": 291.8888854980469,
        "wires": []
    },
    {
        "id": "b4141b9a.c8349",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyACM0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": false
    },
    {
        "id": "80bcdc23.753798",
        "type": "sqlitedb",
        "z": "",
        "db": "/home/pi/db/aq.db"
    },
    {
        "id": "c1cf7c8d.ce2c38",
        "type": "mqtt-broker",
        "z": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": ""
    }
]