[
    {
        "id": "e09c80eb.da79a",
        "type": "tab",
        "label": "SensorInput"
    },
    {
        "id": "b7d5a55e.862748",
        "type": "serial in",
        "z": "e09c80eb.da79a",
        "name": "Sensors",
        "serial": "ed8ea525.724fb8",
        "x": 121,
        "y": 348,
        "wires": [
            [
                "80c1c216.bf816",
                "8f62b2e4.1354d8"
            ]
        ]
    },
    {
        "id": "871518b6.079ca",
        "type": "sqlite",
        "z": "e09c80eb.da79a",
        "mydb": "c9c91b2b.2e14a8",
        "name": "SensorDB",
        "x": 1314.999984741211,
        "y": 270,
        "wires": [
            [
                "529c2ba0.468944"
            ]
        ]
    },
    {
        "id": "21937f0c.d8dc88",
        "type": "inject",
        "z": "e09c80eb.da79a",
        "name": "Create table",
        "topic": "create table sensors(id INTEGER PRIMARY KEY NOT NULL, temperature REAL, humidity REAL, pressure REAL, mq135 INTEGER, timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL);",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 1068.499984741211,
        "y": 229,
        "wires": [
            [
                "871518b6.079ca"
            ]
        ]
    },
    {
        "id": "fcdda470.eaec78",
        "type": "inject",
        "z": "e09c80eb.da79a",
        "name": "Delete table",
        "topic": "DROP TABLE sensors",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 1062.499984741211,
        "y": 177,
        "wires": [
            [
                "871518b6.079ca"
            ]
        ]
    },
    {
        "id": "529c2ba0.468944",
        "type": "debug",
        "z": "e09c80eb.da79a",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1507.999984741211,
        "y": 270,
        "wires": []
    },
    {
        "id": "e3449c4.f5e10e",
        "type": "function",
        "z": "e09c80eb.da79a",
        "name": "INSERT BIND",
        "func": "var data = msg.payload;\n\nmsg.topic = \"INSERT INTO sensors (temperature, humidity, pressure, mq135) VALUES (?,?,?,?)\";\nmsg.payload = [data.temperature, data.humidity, data.pressure, data.mq135];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1092.499984741211,
        "y": 319,
        "wires": [
            [
                "8478f485.76c0a",
                "871518b6.079ca"
            ]
        ]
    },
    {
        "id": "88fee998.939208",
        "type": "function",
        "z": "e09c80eb.da79a",
        "name": "Sensors to JSON",
        "func": "var sensors = msg.payload.split(\",\");\n\nvar json = {};\nfor (i=0; i<sensors.length; i++) {\n\tvar fields = sensors[i].split(\"=\");\n\tif (fields[1] !== \"\") {\n\t    json[fields[0]] = fields[1];   \n\t}\n}\n\nmsg.payload = json;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520.4999542236328,
        "y": 349,
        "wires": [
            [
                "7cfbb23a.acb304"
            ]
        ]
    },
    {
        "id": "5c3b9b8c.4ef664",
        "type": "debug",
        "z": "e09c80eb.da79a",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1090.499984741211,
        "y": 458,
        "wires": []
    },
    {
        "id": "4343d6b.c1c6aa8",
        "type": "sqlite",
        "z": "e09c80eb.da79a",
        "mydb": "c9c91b2b.2e14a8",
        "name": "SensorDB",
        "x": 511,
        "y": 541,
        "wires": [
            [
                "936fbee2.82f7a"
            ]
        ]
    },
    {
        "id": "d3937c74.86f5b",
        "type": "inject",
        "z": "e09c80eb.da79a",
        "name": "SELECT *",
        "topic": "SELECT * FROM SENSORS",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 318,
        "y": 541,
        "wires": [
            [
                "4343d6b.c1c6aa8"
            ]
        ]
    },
    {
        "id": "936fbee2.82f7a",
        "type": "debug",
        "z": "e09c80eb.da79a",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 703,
        "y": 541,
        "wires": []
    },
    {
        "id": "8478f485.76c0a",
        "type": "debug",
        "z": "e09c80eb.da79a",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1318.999984741211,
        "y": 340,
        "wires": []
    },
    {
        "id": "80c1c216.bf816",
        "type": "debug",
        "z": "e09c80eb.da79a",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 320.99998474121094,
        "y": 295,
        "wires": []
    },
    {
        "id": "c087950d.660f6",
        "type": "delay",
        "z": "e09c80eb.da79a",
        "name": "Limit messages",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 875.4999847412109,
        "y": 350,
        "wires": [
            [
                "5c3b9b8c.4ef664",
                "e3449c4.f5e10e",
                "e784f013.1195b"
            ]
        ]
    },
    {
        "id": "28d11b4c.8baa34",
        "type": "sqlite",
        "z": "e09c80eb.da79a",
        "mydb": "c9c91b2b.2e14a8",
        "name": "SensorDB",
        "x": 510,
        "y": 598,
        "wires": [
            [
                "2c09e77b.f19d08"
            ]
        ]
    },
    {
        "id": "294e74.793a098c",
        "type": "inject",
        "z": "e09c80eb.da79a",
        "name": "SELECT LAST",
        "topic": "SELECT * FROM sensors ORDER BY id DESC LIMIT 1;",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 323,
        "y": 598,
        "wires": [
            [
                "28d11b4c.8baa34"
            ]
        ]
    },
    {
        "id": "2c09e77b.f19d08",
        "type": "debug",
        "z": "e09c80eb.da79a",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 702,
        "y": 599,
        "wires": []
    },
    {
        "id": "e784f013.1195b",
        "type": "mqtt out",
        "z": "e09c80eb.da79a",
        "name": "Publish sensor data",
        "topic": "aq-raw",
        "qos": "0",
        "retain": "false",
        "broker": "fcc6bd86.6e101",
        "x": 1152.499984741211,
        "y": 394,
        "wires": []
    },
    {
        "id": "7cfbb23a.acb304",
        "type": "function",
        "z": "e09c80eb.da79a",
        "name": "Filter",
        "func": "var json = msg.payload;\n\n//Hardcoded invalid values, meaning the sensors are currently disabled\nif (\"temperature\" in json && \"pressure\" in json && \"humidity\" in json) {\n    //First case: bme280 not connected\n    //Seconds case: bme280 init failed\n    if ((parseInt(json.temperature) == 187.29 && parseInt(json.pressure) == -104.50 && parseInt(json.humidity) == 100.00) || (parseInt(json.temperature) == 23.78 && parseInt(json.pressure) == 754.50 && parseInt(json.humidity) == 65.886)) {\n        delete json.temperature;\n        delete json.pressure;\n        delete json.humidity;\n    }\n}\n\nif (\"mq135\" in json && parseInt(json.mq135) == 1023) {\n    delete json.mq135;\n}\n\nif (\"iaqs\" in json && parseInt(json.iaqs) !== 0) {\n    delete json.iaqs;\n    delete json.co2;\n    delete json.tvoc;\n}\n\nmsg.payload = json;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 695.4999847412109,
        "y": 350,
        "wires": [
            [
                "c087950d.660f6"
            ]
        ]
    },
    {
        "id": "8f62b2e4.1354d8",
        "type": "function",
        "z": "e09c80eb.da79a",
        "name": "Checksum",
        "func": "function checksum(str, chk) {\n    sum = 0;\n    for (var i = 0; i < str.length; i++) {\n        var chr = str.charCodeAt(i);\n        sum += (chr * i);\n    }\n    sum = 0xFF & sum;\n    return chk == sum;\n}\n\nvar cleanString = msg.payload.replace(/\\n|\\r/g,\"\");\nvar tmp = cleanString.split(\",chk=\");\nvar check = (tmp.length == 2) ? tmp[1] : null;\nif (check === null) {\n    return null;\n}\n\nvar cleanPayload = tmp[0];\n//Performing checksum\nif (!checksum(cleanPayload, parseInt(check))) {\n    return null;\n}\n\nmsg.payload = cleanPayload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 311.4964904785156,
        "y": 348.1632080078125,
        "wires": [
            [
                "88fee998.939208",
                "f41a5acb.ecd368"
            ]
        ]
    },
    {
        "id": "f41a5acb.ecd368",
        "type": "debug",
        "z": "e09c80eb.da79a",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 528.8957977294922,
        "y": 291.8888854980469,
        "wires": []
    },
    {
        "id": "ed8ea525.724fb8",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/serial0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": false
    },
    {
        "id": "c9c91b2b.2e14a8",
        "type": "sqlitedb",
        "z": "",
        "db": "/home/nodered/db/aq.db"
    },
    {
        "id": "fcc6bd86.6e101",
        "type": "mqtt-broker",
        "z": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": ""
    }
]
