[
    {
        "id": "9f109f44.58f518",
        "type": "tab",
        "label": "SensorInput"
    },
    {
        "id": "bcb5f2db.f7976",
        "type": "serial in",
        "z": "9f109f44.58f518",
        "name": "Sensors",
        "serial": "c9016ea6.5dfcc",
        "x": 117.66677856445312,
        "y": 204.66668701171875,
        "wires": [
            [
                "e986d50a.051de",
                "351e208e.a8cad8"
            ]
        ]
    },
    {
        "id": "24ec40a4.93be28",
        "type": "sqlite",
        "z": "9f109f44.58f518",
        "mydb": "cafc488c.d5056",
        "name": "SensorDB",
        "x": 1233.3333740234375,
        "y": 259.4444274902344,
        "wires": [
            [
                "cb543100.801228"
            ]
        ]
    },
    {
        "id": "cb543100.801228",
        "type": "debug",
        "z": "9f109f44.58f518",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1412.6668701171875,
        "y": 259.5555419921875,
        "wires": []
    },
    {
        "id": "a8a0412.b3cdf4",
        "type": "function",
        "z": "9f109f44.58f518",
        "name": "INSERT BIND",
        "func": "var data = msg.payload;\n\nmsg.topic = \"INSERT INTO sensors (temperature, humidity, pressure, mq135, iaqs, co2, tvoc) VALUES (?,?,?,?,?,?,?)\";\nmsg.payload = [data.temperature, data.humidity, data.pressure, data.mq135, data.iaqs, data.co2, data.tvoc];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1034.27783203125,
        "y": 259.4444274902344,
        "wires": [
            [
                "984a5485.8ca228",
                "24ec40a4.93be28"
            ]
        ]
    },
    {
        "id": "bf30cbab.632928",
        "type": "function",
        "z": "9f109f44.58f518",
        "name": "Sensors to JSON",
        "func": "var sensors = msg.payload.split(\",\");\n\nvar json = {};\nfor (i=0; i<sensors.length; i++) {\n\tvar fields = sensors[i].split(\"=\");\n\tif (fields[1] !== \"\") {\n\t    json[fields[0]] = fields[1];   \n\t}\n}\n\nmsg.payload = json;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 501.6111602783203,
        "y": 205.66668701171875,
        "wires": [
            [
                "a27dde7b.3ed45"
            ]
        ]
    },
    {
        "id": "ab2e7f63.591988",
        "type": "debug",
        "z": "9f109f44.58f518",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1023.3890380859375,
        "y": 159.11114501953125,
        "wires": []
    },
    {
        "id": "984a5485.8ca228",
        "type": "debug",
        "z": "9f109f44.58f518",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1231.6668701171875,
        "y": 307.2221984863281,
        "wires": []
    },
    {
        "id": "e986d50a.051de",
        "type": "debug",
        "z": "9f109f44.58f518",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 290.1112060546875,
        "y": 250.66668701171875,
        "wires": []
    },
    {
        "id": "1849ee03.f1cc6a",
        "type": "delay",
        "z": "9f109f44.58f518",
        "name": "Limit messages",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 838.6112060546875,
        "y": 205.66668701171875,
        "wires": [
            [
                "ab2e7f63.591988",
                "a8a0412.b3cdf4",
                "5a97802a.68e65"
            ]
        ]
    },
    {
        "id": "5a97802a.68e65",
        "type": "mqtt out",
        "z": "9f109f44.58f518",
        "name": "Publish sensor data",
        "topic": "aq-raw",
        "qos": "0",
        "retain": "false",
        "broker": "52a7278c.3f491",
        "x": 1053.6112060546875,
        "y": 204.66668701171875,
        "wires": []
    },
    {
        "id": "a27dde7b.3ed45",
        "type": "function",
        "z": "9f109f44.58f518",
        "name": "Filter",
        "func": "var json = msg.payload;\n\n//Hardcoded invalid values, meaning the sensors are currently disabled\nif (\"temperature\" in json && \"pressure\" in json && \"humidity\" in json) {\n    //First case: bme280 not connected\n    //Seconds case: bme280 init failed\n    if ((parseInt(json.temperature) == 187.29 && parseInt(json.pressure) == -104.50 && parseInt(json.humidity) == 100.00) || (parseInt(json.temperature) == 23.78 && parseInt(json.pressure) == 754.50 && parseInt(json.humidity) == 65.886)) {\n        delete json.temperature;\n        delete json.pressure;\n        delete json.humidity;\n    }\n}\n\nif (\"mq135\" in json && parseInt(json.mq135) == 1023) {\n    delete json.mq135;\n}\n\nif (\"iaqs\" in json && parseInt(json.iaqs) !== 0) {\n    delete json.iaqs;\n    delete json.co2;\n    delete json.tvoc;\n}\n\nmsg.payload = json;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 675.6112060546875,
        "y": 205.66668701171875,
        "wires": [
            [
                "1849ee03.f1cc6a"
            ]
        ]
    },
    {
        "id": "351e208e.a8cad8",
        "type": "function",
        "z": "9f109f44.58f518",
        "name": "Checksum",
        "func": "function checksum(str, chk) {\n    sum = 0;\n    for (var i = 0; i < str.length; i++) {\n        var chr = str.charCodeAt(i);\n        sum += (chr * i);\n    }\n    sum = 0xFF & sum;\n    return chk == sum;\n}\n\nvar cleanString = msg.payload.replace(/\\n|\\r/g,\"\");\nvar tmp = cleanString.split(\",chk=\");\nvar check = (tmp.length == 2) ? tmp[1] : null;\nif (check === null) {\n    return null;\n}\n\nvar cleanPayload = tmp[0];\n//Performing checksum\nif (!checksum(cleanPayload, parseInt(check))) {\n    return null;\n}\n\nmsg.payload = cleanPayload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 292.6076965332031,
        "y": 204.82989501953125,
        "wires": [
            [
                "bf30cbab.632928",
                "f20e268b.f297c"
            ]
        ]
    },
    {
        "id": "f20e268b.f297c",
        "type": "debug",
        "z": "9f109f44.58f518",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 481.00701904296875,
        "y": 248.55557250976562,
        "wires": []
    },
    {
        "id": "9881b215.d1c7f",
        "type": "sqlite",
        "z": "9f109f44.58f518",
        "mydb": "cafc488c.d5056",
        "name": "SensorDB",
        "x": 692.666748046875,
        "y": 487.5556640625,
        "wires": [
            [
                "c96f9465.6534c8"
            ]
        ]
    },
    {
        "id": "d10e5197.4eca4",
        "type": "inject",
        "z": "9f109f44.58f518",
        "name": "Create table",
        "topic": "create table sensors(id INTEGER PRIMARY KEY NOT NULL, temperature REAL, humidity REAL, pressure REAL, mq135 INTEGER, iaqs INTEGER, co2 INTEGER, tvoc INTEGER, timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL);",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 447.1112060546875,
        "y": 410.8889465332031,
        "wires": [
            [
                "9881b215.d1c7f"
            ]
        ]
    },
    {
        "id": "9b38825e.c87c5",
        "type": "inject",
        "z": "9f109f44.58f518",
        "name": "Delete table",
        "topic": "DROP TABLE sensors",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 446.1112060546875,
        "y": 461.8889465332031,
        "wires": [
            [
                "9881b215.d1c7f"
            ]
        ]
    },
    {
        "id": "84b73827.ffc53",
        "type": "inject",
        "z": "9f109f44.58f518",
        "name": "SELECT *",
        "topic": "SELECT * FROM SENSORS",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 436.6112060546875,
        "y": 514.8889465332031,
        "wires": [
            [
                "9881b215.d1c7f"
            ]
        ]
    },
    {
        "id": "b8485884.eb06b8",
        "type": "inject",
        "z": "9f109f44.58f518",
        "name": "SELECT LAST",
        "topic": "SELECT * FROM sensors ORDER BY id DESC LIMIT 1;",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 455.6112060546875,
        "y": 566.8889465332031,
        "wires": [
            [
                "9881b215.d1c7f"
            ]
        ]
    },
    {
        "id": "c96f9465.6534c8",
        "type": "debug",
        "z": "9f109f44.58f518",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 872.6668090820312,
        "y": 487.55560302734375,
        "wires": []
    },
    {
        "id": "c9016ea6.5dfcc",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/serial0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": false
    },
    {
        "id": "cafc488c.d5056",
        "type": "sqlitedb",
        "z": "",
        "db": "/home/nodered/db/aq.db"
    },
    {
        "id": "52a7278c.3f491",
        "type": "mqtt-broker",
        "z": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": ""
    }
]
